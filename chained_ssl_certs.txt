Intro
-----
We had a problem recently with our certificates. Our cert file contained our
public key, and it worked in browsers, but it met with mixed success when
accessing our APIs via Python scripts.


Intro to Certs
--------------
http://www.standalone-sysadmin.com/blog/2010/09/intermediate-certificate-hell/
has an excellent breakdown of what this means, though he goes into some detail
about secondary certs that we won't touch on here.

As part of an SSL transaction, the web server sends across the public key part
of its certificate and a signature from a parent certificate vouching
that that certificate does indeed belong to the site owner.

That signature is generated by signing the public key with the private key of
its parent certificate in the chain. This continues until the Root certificate,
which is expected to have signed itself.

Most operating systems and some software packages come equipped with a list of
public keys for trusted Root certificates, so ultimately the responsibility of
what roots to trust is up to your OS or software vendor.

When authenticating a SSL certificate, the site's public key is checked against
its parent, which is checked against IT's parent, all the way up to the root.

If any certificate in the chain is found to not be signed by the cert it claims
to have been signed by, or if the root certificate of the chain isn't in the
OS's trusted root certificate list, then the site's certificate is considered
invalid.

In practice, most of these chains are usually only two or three certificates
long, so it's not as much work as it sounds.

The key piece of information (though I didn't know it at the time) is that
our certificate is, like most others created after about 2010, signed with an
intermediate certificate. Our chain is three certificates long.

Root Certificate   -> Intermediate Certificate -> My Certificate
GeoTrust Global CA -> GeoTrust SSL CA          -> *.mediacore.tv


The Problem
-----------
Some background on the problem:

We first saw the problem when a customer tried to use our uploader python script.

The uploader script used the Requests library, which in turn used a bundled
httplib3, which in turn used ssl.SSLSocket.getpeercert(), which in turn used
OpenSSL to check that the certificate my server used to sign requests was valid.

When the OpenSSL version was "OpenSSL 0.9.8r 8 Feb 2011", there were no problems.

But when I upgraded to "OpenSSL 1.0.1c 10 May 2012", I started getting the
following error:

	[Errno 1] _ssl.c:504: error:14090086:SSL routines:SSL3_GET_SERVER_CERTIFICATE:certificate verify failed

In the process of debugging I learned a bunch about how the Python Requests
library looks for its trusted root certificates. It actually likes to use a
Python package called 'certifi' which includes most of the globally recognized
trusworthy Certificate Authorities.

On a hunch, I tracked down the public key for the intermediate cert and added
it to the bottom of the certifi/cacert.pem file.

Suddenly my Python script stopped complaining about the certificate and worked!

I knew by this point that I could just bundle this intermediate certificate
with my software and tell Requests to use it to verify my site's cert, but that
didn't seem like a general enough solution. After all, since the existing list
of trusted roots included "GeoTrust Global CA", it should be the case that
"GeoTrust SSL CA" is trusted by extension, right? And my web browser did it
with no fuss.

The Solution
------------
More digging brought me to the following information:

When your web server serves its certificate, it must include all certificates
in the chain up to (but not including) a certificate that the OS or software
already considers trustworthy. In this case, it means that instead of just
serving our own cert, we must serve the intermediate cert too. We need not
serve the root cert, though I don't think it'd hurt, because that already
exists in most computer's trusted certs list.

Web browsers can usually cope with a missing intermediate cert because they
tend to store caches of all the certs they've ever come across.

Solution? Append the intermediate cert to the file that your web browser
serves your cert from.

Instead of:
	-----BEGIN CERTIFICATE-----
	MIIEpjCCA46gAwIBAgIDAXNMMA0GCSqGSIb3DQEBBQUAMEAxCzAJBgNVBAYTAlVT
	MRcwFQYDVQQKEw5HZW9UcnVzdCwgSW5jLjEYMBYGA1UEAxMPR2VvVHJ1c3QgU1NM
	IENBMB4XDTEyMDUyODIxMTI0OFoXDTE0MDgzMDIyMjgwN1owgbgxKTAnBgNVBAUT
	{... you get the idea ...}
	XDGRaiuwMmp4mTlENLSFVp1oNK223DltJeUjhkQnCikEI/xc+Ftd0aN6ji8VkZ9Q
	CtiwGZFC2krhy6lQmCxWJEC6G8Kbt30Y5y0Y9gTPOgeQ96g7IMIxP3gXTl/EXZLl
	0vNGm2Kr9Kmk67G3v6JJtEQ51ZaEoSu+hcmlPMc4kHAr0cX54SjIBdXh
	-----END CERTIFICATE-----


The file should look like...:
	MediaCore Certificate (Public Key)
	-----BEGIN CERTIFICATE-----
	MIIEpjCCA46gAwIBAgIDAXNMMA0GCSqGSIb3DQEBBQUAMEAxCzAJBgNVBAYTAlVT
	MRcwFQYDVQQKEw5HZW9UcnVzdCwgSW5jLjEYMBYGA1UEAxMPR2VvVHJ1c3QgU1NM
	IENBMB4XDTEyMDUyODIxMTI0OFoXDTE0MDgzMDIyMjgwN1owgbgxKTAnBgNVBAUT
	{... you get the idea ...}
	XDGRaiuwMmp4mTlENLSFVp1oNK223DltJeUjhkQnCikEI/xc+Ftd0aN6ji8VkZ9Q
	CtiwGZFC2krhy6lQmCxWJEC6G8Kbt30Y5y0Y9gTPOgeQ96g7IMIxP3gXTl/EXZLl
	0vNGm2Kr9Kmk67G3v6JJtEQ51ZaEoSu+hcmlPMc4kHAr0cX54SjIBdXh
	-----END CERTIFICATE-----

	GeoTrust SSL CA Certificate (Public Key)
	-----BEGIN CERTIFICATE-----
	MIID2TCCAsGgAwIBAgIDAjbQMA0GCSqGSIb3DQEBBQUAMEIxCzAJBgNVBAYTAlVT
	MRYwFAYDVQQKEw1HZW9UcnVzdCBJbmMuMRswGQYDVQQDExJHZW9UcnVzdCBHbG9i
	YWwgQ0EwHhcNMTAwMjE5MjIzOTI2WhcNMjAwMjE4MjIzOTI2WjBAMQswCQYDVQQG
	{... you get the idea ...}
	2k9QbSqr0E1TQcKOu3EDSSmGGM8hQkx0YlEVxW+o78Qn5Rsz3VqI138S0adhJR/V
	4NwdzxoQ2KDLX4z6DOW/cf/lXUQdpj6HR/oaToODEj+IZpWYeZqF6wJHzSXj8gYE
	TpnKXKBuervdo5AaRTPvvz7SBMS24CqFZUE+ENQ=
	-----END CERTIFICATE-----

Only one question remains: Why did OpenSSL 0.9.8r not complain?


Debugging tools
---------------

How can you confirm whether or not you're serving the correct certs from
the chain?

Here's what the wrong output looks like:
	$ openssl s_client -connect anthonyt.mediacore.tv:443 -showcerts

	CONNECTED(00000003)
	depth=0 serialNumber = MsGMfWPB45SXHERGi8OY2M0jxfJEbOsB, C = CA, ST = British Columbia, L = Victoria, O = Mediacore Technologies INC., OU = Security, CN = *.mediacore.tv
	verify error:num=20:unable to get local issuer certificate
	verify return:1
	depth=0 serialNumber = MsGMfWPB45SXHERGi8OY2M0jxfJEbOsB, C = CA, ST = British Columbia, L = Victoria, O = Mediacore Technologies INC., OU = Security, CN = *.mediacore.tv
	verify error:num=27:certificate not trusted
	verify return:1
	depth=0 serialNumber = MsGMfWPB45SXHERGi8OY2M0jxfJEbOsB, C = CA, ST = British Columbia, L = Victoria, O = Mediacore Technologies INC., OU = Security, CN = *.mediacore.tv
	verify error:num=21:unable to verify the first certificate
	verify return:1
	---
	Certificate chain
	 0 s:/serialNumber=MsGMfWPB45SXHERGi8OY2M0jxfJEbOsB/C=CA/ST=British Columbia/L=Victoria/O=Mediacore Technologies INC./OU=Security/CN=*.mediacore.tv
	   i:/C=US/O=GeoTrust, Inc./CN=GeoTrust SSL CA
	-----BEGIN CERTIFICATE-----
	MIIEpjCCA46gAwIBAgIDAXNMMA0GCSqGSIb3DQEBBQUAMEAxCzAJBgNVBAYTAlVT
	MRcwFQYDVQQKEw5HZW9UcnVzdCwgSW5jLjEYMBYGA1UEAxMPR2VvVHJ1c3QgU1NM
	IENBMB4XDTEyMDUyODIxMTI0OFoXDTE0MDgzMDIyMjgwN1owgbgxKTAnBgNVBAUT
	IE1zR01mV1BCNDVTWEhFUkdpOE9ZMk0wanhmSkViT3NCMQswCQYDVQQGEwJDQTEZ
	MBcGA1UECBMQQnJpdGlzaCBDb2x1bWJpYTERMA8GA1UEBxMIVmljdG9yaWExJDAi
	BgNVBAoTG01lZGlhY29yZSBUZWNobm9sb2dpZXMgSU5DLjERMA8GA1UECxMIU2Vj
	dXJpdHkxFzAVBgNVBAMMDioubWVkaWFjb3JlLnR2MIIBIjANBgkqhkiG9w0BAQEF
	AAOCAQ8AMIIBCgKCAQEA50yUbcBNkGgIbjNAGcHVdJLd/PQkHvRoIBeoFtC6KReG
	jo3zQA4RjAxAVoUf81seOMTEzKcddMLVcT6pUT6BhGVJgdJz6OvLYaqWp2noPcln
	/K/6gZVN+c2GB4tJJ3z2abAu/YHXYBZqTvTD8a84k89nrVltlMABjDVEL8EKc5zg
	UrfphG6rMIW3IhE2t/B5K424RP2sCXlpVh/vuFQp9cQy3NzS/n6X1lAfORr9gGk7
	w1X+WXzdc3pWNoEXx/XdgvIFYG36nGrJ/AkbPUTWZvBOQDdrd5bwrm8KWyeghqBO
	/Ig0HKzRcBvVZrS0V5A6MEgDmGuzAnhgIrq1T/eWHQIDAQABo4IBLjCCASowHwYD
	VR0jBBgwFoAUQnlUG2HNVSs+Y9U8SFf1n/tFzkowDgYDVR0PAQH/BAQDAgSwMB0G
	A1UdJQQWMBQGCCsGAQUFBwMBBggrBgEFBQcDAjAnBgNVHREEIDAegg4qLm1lZGlh
	Y29yZS50doIMbWVkaWFjb3JlLnR2MD0GA1UdHwQ2MDQwMqAwoC6GLGh0dHA6Ly9n
	dHNzbC1jcmwuZ2VvdHJ1c3QuY29tL2NybHMvZ3Rzc2wuY3JsMB0GA1UdDgQWBBQe
	u0e5+57SVmqnF62THngyxu7cEjAMBgNVHRMBAf8EAjAAMEMGCCsGAQUFBwEBBDcw
	NTAzBggrBgEFBQcwAoYnaHR0cDovL2d0c3NsLWFpYS5nZW90cnVzdC5jb20vZ3Rz
	c2wuY3J0MA0GCSqGSIb3DQEBBQUAA4IBAQCE7/Bd7xTJ5q9YXpAU6cntg7/N01Mc
	nCq2KTJqva6yEwXvJR3yRXOtX+r+T0daJS5570/0gUD6KagzYD3ZA0Hy4yW4LMmG
	obJ/ItmJameMtdBiLe4ftx0FhbU2VetzfXgv6AxwvLjTFxO2eC0w0PlKHKFbz6uc
	XDGRaiuwMmp4mTlENLSFVp1oNK223DltJeUjhkQnCikEI/xc+Ftd0aN6ji8VkZ9Q
	CtiwGZFC2krhy6lQmCxWJEC6G8Kbt30Y5y0Y9gTPOgeQ96g7IMIxP3gXTl/EXZLl
	0vNGm2Kr9Kmk67G3v6JJtEQ51ZaEoSu+hcmlPMc4kHAr0cX54SjIBdXh
	-----END CERTIFICATE-----
	---
	Server certificate
	subject=/serialNumber=MsGMfWPB45SXHERGi8OY2M0jxfJEbOsB/C=CA/ST=British Columbia/L=Victoria/O=Mediacore Technologies INC./OU=Security/CN=*.mediacore.tv
	issuer=/C=US/O=GeoTrust, Inc./CN=GeoTrust SSL CA
	---
	No client certificate CA names sent
	---
	SSL handshake has read 1510 bytes and written 648 bytes
	---
	[continued output snipped here]


Here's what the right output looks like:

	$ openssl s_client -connect anthonyt.mediacore.tv:443 -showcerts

	CONNECTED(00000003)
	depth=1 C = US, O = "GeoTrust, Inc.", CN = GeoTrust SSL CA
	verify error:num=20:unable to get local issuer certificate
	verify return:0
	---
	Certificate chain
	 0 s:/serialNumber=MsGMfWPB45SXHERGi8OY2M0jxfJEbOsB/C=CA/ST=British Columbia/L=Victoria/O=Mediacore Technologies INC./OU=Security/CN=*.mediacore.tv
	   i:/C=US/O=GeoTrust, Inc./CN=GeoTrust SSL CA
	-----BEGIN CERTIFICATE-----
	MIIEpjCCA46gAwIBAgIDAXNMMA0GCSqGSIb3DQEBBQUAMEAxCzAJBgNVBAYTAlVT
	MRcwFQYDVQQKEw5HZW9UcnVzdCwgSW5jLjEYMBYGA1UEAxMPR2VvVHJ1c3QgU1NM
	IENBMB4XDTEyMDUyODIxMTI0OFoXDTE0MDgzMDIyMjgwN1owgbgxKTAnBgNVBAUT
	IE1zR01mV1BCNDVTWEhFUkdpOE9ZMk0wanhmSkViT3NCMQswCQYDVQQGEwJDQTEZ
	MBcGA1UECBMQQnJpdGlzaCBDb2x1bWJpYTERMA8GA1UEBxMIVmljdG9yaWExJDAi
	BgNVBAoTG01lZGlhY29yZSBUZWNobm9sb2dpZXMgSU5DLjERMA8GA1UECxMIU2Vj
	dXJpdHkxFzAVBgNVBAMMDioubWVkaWFjb3JlLnR2MIIBIjANBgkqhkiG9w0BAQEF
	AAOCAQ8AMIIBCgKCAQEA50yUbcBNkGgIbjNAGcHVdJLd/PQkHvRoIBeoFtC6KReG
	jo3zQA4RjAxAVoUf81seOMTEzKcddMLVcT6pUT6BhGVJgdJz6OvLYaqWp2noPcln
	/K/6gZVN+c2GB4tJJ3z2abAu/YHXYBZqTvTD8a84k89nrVltlMABjDVEL8EKc5zg
	UrfphG6rMIW3IhE2t/B5K424RP2sCXlpVh/vuFQp9cQy3NzS/n6X1lAfORr9gGk7
	w1X+WXzdc3pWNoEXx/XdgvIFYG36nGrJ/AkbPUTWZvBOQDdrd5bwrm8KWyeghqBO
	/Ig0HKzRcBvVZrS0V5A6MEgDmGuzAnhgIrq1T/eWHQIDAQABo4IBLjCCASowHwYD
	VR0jBBgwFoAUQnlUG2HNVSs+Y9U8SFf1n/tFzkowDgYDVR0PAQH/BAQDAgSwMB0G
	A1UdJQQWMBQGCCsGAQUFBwMBBggrBgEFBQcDAjAnBgNVHREEIDAegg4qLm1lZGlh
	Y29yZS50doIMbWVkaWFjb3JlLnR2MD0GA1UdHwQ2MDQwMqAwoC6GLGh0dHA6Ly9n
	dHNzbC1jcmwuZ2VvdHJ1c3QuY29tL2NybHMvZ3Rzc2wuY3JsMB0GA1UdDgQWBBQe
	u0e5+57SVmqnF62THngyxu7cEjAMBgNVHRMBAf8EAjAAMEMGCCsGAQUFBwEBBDcw
	NTAzBggrBgEFBQcwAoYnaHR0cDovL2d0c3NsLWFpYS5nZW90cnVzdC5jb20vZ3Rz
	c2wuY3J0MA0GCSqGSIb3DQEBBQUAA4IBAQCE7/Bd7xTJ5q9YXpAU6cntg7/N01Mc
	nCq2KTJqva6yEwXvJR3yRXOtX+r+T0daJS5570/0gUD6KagzYD3ZA0Hy4yW4LMmG
	obJ/ItmJameMtdBiLe4ftx0FhbU2VetzfXgv6AxwvLjTFxO2eC0w0PlKHKFbz6uc
	XDGRaiuwMmp4mTlENLSFVp1oNK223DltJeUjhkQnCikEI/xc+Ftd0aN6ji8VkZ9Q
	CtiwGZFC2krhy6lQmCxWJEC6G8Kbt30Y5y0Y9gTPOgeQ96g7IMIxP3gXTl/EXZLl
	0vNGm2Kr9Kmk67G3v6JJtEQ51ZaEoSu+hcmlPMc4kHAr0cX54SjIBdXh
	-----END CERTIFICATE-----
	 1 s:/C=US/O=GeoTrust, Inc./CN=GeoTrust SSL CA
	   i:/C=US/O=GeoTrust Inc./CN=GeoTrust Global CA
	-----BEGIN CERTIFICATE-----
	MIID2TCCAsGgAwIBAgIDAjbQMA0GCSqGSIb3DQEBBQUAMEIxCzAJBgNVBAYTAlVT
	MRYwFAYDVQQKEw1HZW9UcnVzdCBJbmMuMRswGQYDVQQDExJHZW9UcnVzdCBHbG9i
	YWwgQ0EwHhcNMTAwMjE5MjIzOTI2WhcNMjAwMjE4MjIzOTI2WjBAMQswCQYDVQQG
	EwJVUzEXMBUGA1UEChMOR2VvVHJ1c3QsIEluYy4xGDAWBgNVBAMTD0dlb1RydXN0
	IFNTTCBDQTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAJCzgMHk5Uat
	cGA9uuUU3Z6KXot1WubKbUGlI+g5hSZ6p1V3mkihkn46HhrxJ6ujTDnMyz1Hr4Gu
	FmpcN+9FQf37mpc8oEOdxt8XIdGKolbCA0mEEoE+yQpUYGa5jFTk+eb5lPHgX3UR
	8im55IaisYmtph6DKWOy8FQchQt65+EuDa+kvc3nsVrXjAVaDktzKIt1XTTYdwvh
	dGLicTBi2LyKBeUxY0pUiWozeKdOVSQdl+8a5BLGDzAYtDRN4dgjOyFbLTAZJQ50
	96QhS6CkIMlszZhWwPKoXz4mdaAN+DaIiixafWcwqQ/RmXAueOFRJq9VeiS+jDkN
	d53eAsMMvR8CAwEAAaOB2TCB1jAOBgNVHQ8BAf8EBAMCAQYwHQYDVR0OBBYEFEJ5
	VBthzVUrPmPVPEhX9Z/7Rc5KMB8GA1UdIwQYMBaAFMB6mGiNifurBWQMEX2qfWW4
	ysxOMBIGA1UdEwEB/wQIMAYBAf8CAQAwOgYDVR0fBDMwMTAvoC2gK4YpaHR0cDov
	L2NybC5nZW90cnVzdC5jb20vY3Jscy9ndGdsb2JhbC5jcmwwNAYIKwYBBQUHAQEE
	KDAmMCQGCCsGAQUFBzABhhhodHRwOi8vb2NzcC5nZW90cnVzdC5jb20wDQYJKoZI
	hvcNAQEFBQADggEBANTvU4ToGr2hiwTAqfVfoRB4RV2yV2pOJMtlTjGXkZrUJPji
	J2ZwMZzBYlQG55cdOprApClICq8kx6jEmlTBfEx4TCtoLF0XplR4TEbigMMfOHES
	0tdT41SFULgCy+5jOvhWiU1Vuy7AyBh3hjELC3DwfjWDpCoTZFZnNF0WX3OsewYk
	2k9QbSqr0E1TQcKOu3EDSSmGGM8hQkx0YlEVxW+o78Qn5Rsz3VqI138S0adhJR/V
	4NwdzxoQ2KDLX4z6DOW/cf/lXUQdpj6HR/oaToODEj+IZpWYeZqF6wJHzSXj8gYE
	TpnKXKBuervdo5AaRTPvvz7SBMS24CqFZUE+ENQ=
	-----END CERTIFICATE-----
	---
	Server certificate
	subject=/serialNumber=MsGMfWPB45SXHERGi8OY2M0jxfJEbOsB/C=CA/ST=British Columbia/L=Victoria/O=Mediacore Technologies INC./OU=Security/CN=*.mediacore.tv
	issuer=/C=US/O=GeoTrust, Inc./CN=GeoTrust SSL CA
	---
	No client certificate CA names sent
	---
	SSL handshake has read 2845 bytes and written 448 bytes
	---
	[continued output snipped here]
